@page "{currentPage:int?}"
@using TutorDemand.Data.Entities
@using TutorDemand.Data.Enums;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model TutorDemand.Pages.Reservations.IndexModel
@using Pages.Reservation.Models
@{
    ViewData["Title"] = "Reservation List";
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {

    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(HttpContext).RequestToken;
    }

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="~/css/site.css" rel="stylesheet"/>
</head>
<body class="bg-gray-100">
<div class="container mx-auto p-6">
    <div class="bg-white p-8 rounded shadow-md">
        <h1 class="text-2xl font-bold mb-6">Reservations</h1>
        @if (!string.IsNullOrEmpty(Model.SearchResultMessage))
        {
            <div class="alert alert-warning">
                @Model.SearchResultMessage
            </div>
        }
        <div id="updateModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
            <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

                <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

                <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                    <div>
                        <div class="mt-3 text-center sm:mt-5">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Update Reservation</h3>
                            <div class="mt-2">
                                <!-- Dropdowns for Payment Method, Payment Status, Reservation Status -->
                                <select id="paymentMethodDropdown" class="form-control">
                                    @foreach (var method in Enum.GetValues<PaymentMethod>())
                                    {
                                        <option value="@method">@method</option>
                                    }
                                </select>
                                <select id="paymentStatusDropdown" class="form-control">

                                    @foreach (var status in Enum.GetValues<PaymentStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                                <select id="reservationStatusDropdown" class="form-control">

                                    @foreach (var status in Enum.GetValues<ReservationStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mt-5 sm:mt-6">
                        <div class="flex justify-center">
                            <button type="button" class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:text-sm" onclick="hideUpdateModal()">
                                Cancel
                            </button>
                            <button type="button" class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:text-sm" onclick="confirmUpdate()">
                                Confirm
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <input id="searchInput" type="text" placeholder="Search..." class="mb-4 p-2 border rounded" value="@Model.SearchQuery"/>
        <div class="flex justify-end mt-4">
            <img src="https://img.icons8.com/?size=100&id=26139&format=png&color=000000"
                 class="h-5 w-5 text-gray-400 cursor-pointer"
                 id="toggleFilter"
                 width="24" height="24"
                 isUp="false"/>
        </div>

        <form method="post">
            <div id="filterPanel" class="@(ModelState.IsValid ? "hidden" : "")">
                <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3">
                    <div class="flex flex-col">
                        <label for="filter-sName" class="text-sm font-medium text-stone-600">Subject Name</label>
                        <input asp-for="Filter.SubjectName" type="text" id="filter-sName" placeholder="Subject Name" class="mt-2 block w-full rounded-md border border-gray-100 bg-gray-100 px-2 py-2 shadow-sm outline-none focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" value=""/>
                    </div>

                    <div class="flex flex-col">
                        <label for="filter-Tname" class="text-sm font-medium text-stone-600">Tutor Name</label>
                        <input asp-for="Filter.TutorName" type="text" id="filter-Tname" placeholder="Tutor Name" class="mt-2 block w-full rounded-md border border-gray-100 bg-gray-100 px-2 py-2 shadow-sm outline-none focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" value=""/>
                    </div>

                    <div class="flex flex-col">
                        <label for="filter-price" class="text-sm font-medium text-stone-600">Price</label>
                        <input asp-for="Filter.PaidPrice" type="tel" id="filter-price" placeholder="Price" class="mt-2 block w-full rounded-md border border-gray-100 bg-gray-100 px-2 py-2 shadow-sm outline-none focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/>
                        <span asp-validation-for="Filter.CreateAt" class="text-sm italic text-red-500"></span>
                    </div>

                    <div class="flex flex-col">
                        <label for="filter-sDate" class="text-sm font-medium text-stone-600">Start Date</label>
                        <input asp-for="Filter.CreateAt" type="date" id="filter-sDate" class="mt-2 block w-full cursor-pointer rounded-md border border-gray-100 bg-gray-100 px-2 py-2 shadow-sm outline-none focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/>
                        <span asp-validation-for="Filter.CreateAt" class="text-sm italic text-red-500"></span>
                    </div>
                </div>

                <div class="mt-6 grid w-full grid-cols-2 justify-end space-x-4 md:flex">
                    <button id="btn-filter-reset" class="rounded-lg bg-gray-200 px-8 py-2 font-medium text-gray-700 outline-none hover:opacity-80 focus:ring" type="button">Reset</button>
                    <button class="rounded-lg bg-blue-600 px-8 py-2 font-medium text-white outline-none hover:opacity-80 focus:ring" type="submit">Search</button>
                </div>
            </div>
        </form>
    </div>
    @if (Model.Reservations != null && Model.Reservations.Any())
    {
        <table class="min-w-full bg-white">
            <thead>
            <tr>
                <th class="py-2 px-6 border-b">Created At</th>
                <th class="py-2 px-6 border-b">Paid Price</th>
                <th class="py-2 px-6 border-b">Payment Method</th>
                <th class="py-2 px-6 border-b">Payment Status</th>
                <th class="py-2 px-6 border-b">Reservation Status</th>
                <th class="py-2 px-6 border-b">Tutor Name</th>
                <th class="py-2 px-6 border-b">Subject Name</th>
                <th class="py-2 px-6 border-b">Action</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var reservation in Model.Reservations)
            {
                <tr>
                    <td class="py-2 px-6 border-b text-center">@reservation.CreatedAt</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.PaidPrice</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.PaymentMethod</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.PaymentStatus</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.ReservationStatus</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.TutorName</td>
                    <td class="py-2 px-6 border-b text-center">@reservation.SubjectName</td>
                    <td class="py-2 px-6 border-b text-center flex items-center justify-center gap-2">
                        <a href="/Reservation/View/@reservation.Id" class="block rounded-lg bg-gradient-to-r from-blue-400 via-blue-500 to-blue-600 p-2 text-center font-medium text-white hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">View</a>
                        <a href="javascript:void(0)" onclick="openUpdateModal('@reservation.Id', '@reservation.PaymentMethod', '@reservation.PaymentStatus', '@reservation.ReservationStatus')" class="block rounded-lg bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 p-2 text-center font-medium text-white hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-teal-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
                            Update
                        </a>
                        <a href="/Reservation/Delete/@reservation.Id" onclick="return confirmDelete()" class="block rounded-lg bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 p-2 text-center font-medium text-white hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-teal-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <div class="flex justify-between mt-4">
            <a asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage - 1)" class="block p-2 border rounded" style="@(Model.HasPreviousPage ? "" : "pointer-events: none; opacity: 0.5;")">Previous</a>
            <span>Page @Model.CurrentPage of @Model.TotalPages</span>
            <a asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage + 1)" class="block p-2 border rounded" style="@(Model.HasNextPage ? "" : "pointer-events: none; opacity: 0.5;")">Next</a>
        </div>
    }
    else
    {
        <p>No reservations found.</p>
    }
</div>

@section Scripts
{
    <script>
    const toggleFilter = document.getElementById('toggleFilter');
    const filterPanel = document.getElementById('filterPanel');
    const searchInput = document.getElementById('searchInput');
    const resetButton = document.getElementById('btn-filter-reset');    

    // Handle toggle filter button click
    toggleFilter.addEventListener('click', function () {
        filterPanel.classList.toggle('hidden');
        if (filterPanel.classList.contains('hidden')) {
            toggleFilter.setAttribute('src', 'https://img.icons8.com/?size=100&id=26139&format=png&color=000000');
            searchInput.value = "";
            searchInput.disabled = false; // Enable search input
        } else {
            toggleFilter.setAttribute('src', 'https://img.icons8.com/?size=100&id=26124&format=png&color=000000');
            searchInput.disabled = true; // Disable search input
        }
    });

    // Handle reset button click
    resetButton.addEventListener('click', function () {
        document.getElementById('filter-sName').value = '';
        document.getElementById('filter-Tname').value = '';
        document.getElementById('filter-price').value = '';
        document.getElementById('filter-sDate').value = '';
    });

    searchInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
            var query = e.target.value;
            window.location.href = `@Url.Page("./Index")?input=${query}`;
        }
    });

    function confirmDelete() {
                return confirm("Are you sure you want to delete this reservation?");
            }
    
            function openUpdateModal(reservationId, currentPaymentMethod, currentPaymentStatus, currentReservationStatus) {
                // Set the dropdowns to the current values
                document.getElementById('paymentMethodDropdown').value = currentPaymentMethod;
                document.getElementById('paymentStatusDropdown').value = currentPaymentStatus;
                document.getElementById('reservationStatusDropdown').value = currentReservationStatus;
    
                // Store the current values as data attributes on the modal
                document.getElementById('updateModal').dataset.paymentMethod = currentPaymentMethod;
                document.getElementById('updateModal').dataset.paymentStatus = currentPaymentStatus;
                document.getElementById('updateModal').dataset.reservationStatus = currentReservationStatus;
    
                // Store the reservationId as a data attribute on the modal
                document.getElementById('updateModal').dataset.reservationId = reservationId;
    
                // Show the modal
                document.getElementById("updateModal").classList.remove("hidden");
            }
    
            function hideUpdateModal() {
                // Hide the modal
                document.getElementById("updateModal").classList.add("hidden");
            }
    
            function confirmUpdate() {
                // Get the reservationId from the modal's data attribute
                const reservationId = document.getElementById('updateModal').dataset.reservationId;
    
                // Create a form dynamically
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/Reservation/Update/${reservationId}`;
    
                // Add CSRF token
                const token = '@GetAntiXsrfRequestToken()';
                const hiddenTokenInput = document.createElement('input');
                hiddenTokenInput.type = 'hidden';
                hiddenTokenInput.name = '__RequestVerificationToken';
                hiddenTokenInput.value = token;
                form.appendChild(hiddenTokenInput);
    
                // Retrieve current values from data attributes
                const currentPaymentMethod = document.getElementById('updateModal').dataset.paymentMethod;
                const currentPaymentStatus = document.getElementById('updateModal').dataset.paymentStatus;
                const currentReservationStatus = document.getElementById('updateModal').dataset.reservationStatus;
    
                // Get selected values from the dropdowns, fall back to current values if not changed
                const paymentMethod = document.getElementById('paymentMethodDropdown').value || currentPaymentMethod;
                const paymentStatus = document.getElementById('paymentStatusDropdown').value || currentPaymentStatus;
                const reservationStatus = document.getElementById('reservationStatusDropdown').value || currentReservationStatus;
    
                // Add selected or current values to the form
                const paymentMethodInput = document.createElement('input');
                paymentMethodInput.type = 'hidden';
                paymentMethodInput.name = 'paymentMethod';
                paymentMethodInput.value = paymentMethod;
                form.appendChild(paymentMethodInput);
    
                const paymentStatusInput = document.createElement('input');
                paymentStatusInput.type = 'hidden';
                paymentStatusInput.name = 'paymentStatus';
                paymentStatusInput.value = paymentStatus;
                form.appendChild(paymentStatusInput);
    
                const reservationStatusInput = document.createElement('input');
                reservationStatusInput.type = 'hidden';
                reservationStatusInput.name = 'reservationStatus';
                reservationStatusInput.value = reservationStatus;
                form.appendChild(reservationStatusInput);
    
                // Append the form to the body and submit it
                document.body.appendChild(form);
                form.submit();
            }
    
            function sortTable(column) {
                const table = document.getElementById('reservationTable');
                const rows = Array.from(table.rows);
                const icon = document.getElementById(`sortIcon${column}`);
                const sortAscending = sortOrder[column] !== 'asc';
                sortOrder[column] = sortAscending ? 'asc' : 'desc';
            
                // Sắp xếp lại các dòng
                rows.sort((a, b) => {
                    const aValue = a.cells.namedItem(column).innerText.trim();
                    const bValue = b.cells.namedItem(column).innerText.trim();
                    return sortAscending
                        ? aValue.localeCompare(bValue, undefined, { numeric: true })
                        : bValue.localeCompare(aValue, undefined, { numeric: true });
                });
            
                // Xóa các dòng hiện tại trong bảng
                while (table.rows.length > 1) {
                    table.deleteRow(1);
                }
            
                // Thêm lại các dòng đã được sắp xếp vào bảng
                rows.forEach(row => table.appendChild(row));
            
                // Cập nhật icon sắp xếp
                const allIcons = document.querySelectorAll('.sorting-icon');
                allIcons.forEach(icon => icon.src = 'https://img.icons8.com/ios-glyphs/30/sort.png');
            
                icon.src = sortAscending
                    ? 'https://img.icons8.com/ios-glyphs/30/up-squared.png'
                    : 'https://img.icons8.com/ios-glyphs/30/down-squared.png';
            
    }

</script>
}

</body>
</html>